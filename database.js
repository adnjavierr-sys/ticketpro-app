// database.js - Versi√≥n mejorada para guardar cambios
(function() {
    'use strict';
    
    // Verificar que el cliente de Supabase est√© disponible
    if (!window.supabase) {
        console.error('‚ùå Error: El cliente de Supabase no est√° disponible');
        return;
    }
    
    // Funci√≥n auxiliar para manejar errores
    function handleError(error, operation) {
        console.error(`‚ùå Error al ${operation}:`, error);
        if (error.code === 'PGRST116') {
            console.error('‚ö†Ô∏è Error de permisos. Verifica las pol√≠ticas de seguridad.');
        }
        return error;
    }
    
    // Funciones de base de datos
    async function getTickets() {
        try {
            const { data, error } = await window.supabase
                .from('tickets')
                .select('*')
                .order('created_at', { ascending: false });
            
            if (error) throw handleError(error, 'obtener tickets');
            return data;
        } catch (error) {
            console.error('‚ùå Error en getTickets:', error);
            throw error;
        }
    }

    async function createTicket(ticketData) {
        try {
            console.log('üé´ Creando ticket:', ticketData);
            
            const { data, error } = await window.supabase
                .from('tickets')
                .insert([ticketData])
                .select()
                .single();
            
            if (error) throw handleError(error, 'crear ticket');
            
            console.log('‚úÖ Ticket creado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en createTicket:', error);
            throw error;
        }
    }

    async function updateTicket(id, ticketData) {
        try {
            console.log('üîÑ Actualizando ticket:', id, ticketData);
            
            const { data, error } = await window.supabase
                .from('tickets')
                .update(ticketData)
                .eq('id', id)
                .select()
                .single();
            
            if (error) throw handleError(error, 'actualizar ticket');
            
            console.log('‚úÖ Ticket actualizado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en updateTicket:', error);
            throw error;
        }
    }

    async function deleteTicket(id) {
        try {
            console.log('üóëÔ∏è Eliminando ticket:', id);
            
            const { error } = await window.supabase
                .from('tickets')
                .delete()
                .eq('id', id);
            
            if (error) throw handleError(error, 'eliminar ticket');
            
            console.log('‚úÖ Ticket eliminado');
            return true;
        } catch (error) {
            console.error('‚ùå Error en deleteTicket:', error);
            throw error;
        }
    }

    async function getClientes() {
        try {
            const { data, error } = await window.supabase
                .from('clientes')
                .select('*')
                .order('empresa');
            
            if (error) throw handleError(error, 'obtener clientes');
            return data;
        } catch (error) {
            console.error('‚ùå Error en getClientes:', error);
            throw error;
        }
    }

    async function createCliente(clienteData) {
        try {
            console.log('üè¢ Creando cliente:', clienteData);
            
            const { data, error } = await window.supabase
                .from('clientes')
                .insert([clienteData])
                .select()
                .single();
            
            if (error) throw handleError(error, 'crear cliente');
            
            console.log('‚úÖ Cliente creado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en createCliente:', error);
            throw error;
        }
    }

    async function updateCliente(id, clienteData) {
        try {
            console.log('üîÑ Actualizando cliente:', id, clienteData);
            
            const { data, error } = await window.supabase
                .from('clientes')
                .update(clienteData)
                .eq('id', id)
                .select()
                .single();
            
            if (error) throw handleError(error, 'actualizar cliente');
            
            console.log('‚úÖ Cliente actualizado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en updateCliente:', error);
            throw error;
        }
    }

    async function deleteCliente(id) {
        try {
            console.log('üóëÔ∏è Eliminando cliente:', id);
            
            const { error } = await window.supabase
                .from('clientes')
                .delete()
                .eq('id', id);
            
            if (error) throw handleError(error, 'eliminar cliente');
            
            console.log('‚úÖ Cliente eliminado');
            return true;
        } catch (error) {
            console.error('‚ùå Error en deleteCliente:', error);
            throw error;
        }
    }

    async function getAgentes() {
        try {
            const { data, error } = await window.supabase
                .from('agentes')
                .select('*')
                .order('nombre');
            
            if (error) throw handleError(error, 'obtener agentes');
            return data;
        } catch (error) {
            console.error('‚ùå Error en getAgentes:', error);
            throw error;
        }
    }

    async function createAgente(agenteData) {
        try {
            console.log('üë• Creando agente:', agenteData);
            
            const { data, error } = await window.supabase
                .from('agentes')
                .insert([agenteData])
                .select()
                .single();
            
            if (error) throw handleError(error, 'crear agente');
            
            console.log('‚úÖ Agente creado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en createAgente:', error);
            throw error;
        }
    }

    async function updateAgente(id, agenteData) {
        try {
            console.log('üîÑ Actualizando agente:', id, agenteData);
            
            const { data, error } = await window.supabase
                .from('agentes')
                .update(agenteData)
                .eq('id', id)
                .select()
                .single();
            
            if (error) throw handleError(error, 'actualizar agente');
            
            console.log('‚úÖ Agente actualizado:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en updateAgente:', error);
            throw error;
        }
    }

    async function deleteAgente(id) {
        try {
            console.log('üóëÔ∏è Eliminando agente:', id);
            
            const { error } = await window.supabase
                .from('agentes')
                .delete()
                .eq('id', id);
            
            if (error) throw handleError(error, 'eliminar agente');
            
            console.log('‚úÖ Agente eliminado');
            return true;
        } catch (error) {
            console.error('‚ùå Error en deleteAgente:', error);
            throw error;
        }
    }

    async function getPolizas() {
        try {
            const { data, error } = await window.supabase
                .from('polizas')
                .select('*')
                .order('vigencia_inicio', { ascending: false });
            
            if (error) throw handleError(error, 'obtener p√≥lizas');
            return data;
        } catch (error) {
            console.error('‚ùå Error en getPolizas:', error);
            throw error;
        }
    }

    async function createPoliza(polizaData) {
        try {
            console.log('üìã Creando p√≥liza:', polizaData);
            
            const { data, error } = await window.supabase
                .from('polizas')
                .insert([polizaData])
                .select()
                .single();
            
            if (error) throw handleError(error, 'crear p√≥liza');
            
            console.log('‚úÖ P√≥liza creada:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en createPoliza:', error);
            throw error;
        }
    }

    async function updatePoliza(id, polizaData) {
        try {
            console.log('üîÑ Actualizando p√≥liza:', id, polizaData);
            
            const { data, error } = await window.supabase
                .from('polizas')
                .update(polizaData)
                .eq('id', id)
                .select()
                .single();
            
            if (error) throw handleError(error, 'actualizar p√≥liza');
            
            console.log('‚úÖ P√≥liza actualizada:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Error en updatePoliza:', error);
            throw error;
        }
    }

    async function deletePoliza(id) {
        try {
            console.log('üóëÔ∏è Eliminando p√≥liza:', id);
            
            const { error } = await window.supabase
                .from('polizas')
                .delete()
                .eq('id', id);
            
            if (error) throw handleError(error, 'eliminar p√≥liza');
            
            console.log('‚úÖ P√≥liza eliminada');
            return true;
        } catch (error) {
            console.error('‚ùå Error en deletePoliza:', error);
            throw error;
        }
    }

    // Exponer funciones globalmente
    window.getTickets = getTickets;
    window.createTicket = createTicket;
    window.updateTicket = updateTicket;
    window.deleteTicket = deleteTicket;
    window.getClientes = getClientes;
    window.createCliente = createCliente;
    window.updateCliente = updateCliente;
    window.deleteCliente = deleteCliente;
    window.getAgentes = getAgentes;
    window.createAgente = createAgente;
    window.updateAgente = updateAgente;
    window.deleteAgente = deleteAgente;
    window.getPolizas = getPolizas;
    window.createPoliza = createPoliza;
    window.updatePoliza = updatePoliza;
    window.deletePoliza = deletePoliza;

    console.log('‚úÖ Funciones de base de datos cargadas exitosamente');
})();
